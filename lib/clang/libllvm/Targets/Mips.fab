# vim: sw=4:ts=4:tw=78
# $FreeBSD$

sources =
{
	subdir = (llvmlibdir :: 'Target') :: 'Mips';	# TODO: fix :::

	files(
		MicroMipsSizeReduction.cpp Mips16FrameLowering.cpp
		Mips16HardFloat.cpp Mips16HardFloatInfo.cpp
		Mips16ISelDAGToDAG.cpp Mips16ISelLowering.cpp
		Mips16InstrInfo.cpp Mips16RegisterInfo.cpp
		MipsAnalyzeImmediate.cpp MipsAsmPrinter.cpp
		MipsBranchExpansion.cpp MipsCCState.cpp MipsCallLowering.cpp
		MipsConstantIslandPass.cpp MipsDelaySlotFiller.cpp
		MipsExpandPseudo.cpp MipsFastISel.cpp MipsFrameLowering.cpp
		MipsISelDAGToDAG.cpp MipsISelLowering.cpp MipsInstrInfo.cpp
		MipsInstructionSelector.cpp MipsLegalizerInfo.cpp
		MipsMCInstLower.cpp MipsMachineFunction.cpp
		MipsModuleISelDAGToDAG.cpp MipsOptimizePICCall.cpp MipsOs16.cpp
		MipsPreLegalizerCombiner.cpp MipsRegisterBankInfo.cpp
		MipsRegisterInfo.cpp MipsSEFrameLowering.cpp
		MipsSEISelDAGToDAG.cpp MipsSEISelLowering.cpp
		MipsSEInstrInfo.cpp MipsSERegisterInfo.cpp MipsSubtarget.cpp
		MipsTargetMachine.cpp MipsTargetObjectFile.cpp
	)
	+ files(MipsAsmParser.cpp, subdir='AsmParser')
	+ files(MipsInstPrinter.cpp, subdir='InstPrinter')
	+ files(
		MipsABIFlagsSection.cpp MipsABIInfo.cpp MipsAsmBackend.cpp
		MipsELFObjectWriter.cpp MipsELFStreamer.cpp MipsMCAsmInfo.cpp
		MipsMCCodeEmitter.cpp MipsMCExpr.cpp MipsMCTargetDesc.cpp
		MipsNaClELFStreamer.cpp MipsOptionRecord.cpp
		MipsTargetStreamer.cpp
		,
		subdir = 'MCTargetDesc'
	)
	+ files(MipsTargetInfo.cpp, subdir='TargetInfo')
	+ (if opts.llvm.xdw
	{
		files(MipsDisassembler.cpp, subdir='Disassembler')
	}
	else [])
};
