# vim: sw=4:ts=4:tw=78
# $FreeBSD$

sources =
{
	subdir = (llvmlibdir :: 'Target') :: 'AArch64';		# TODO: fix :::

	files(
		AArch64A53Fix835769.cpp AArch64A57FPLoadBalancing.cpp
		AArch64AdvSIMDScalarPass.cpp AArch64AsmPrinter.cpp
		AArch64BranchTargets.cpp AArch64CallLowering.cpp
		AArch64CleanupLocalDynamicTLSPass.cpp AArch64CollectLOH.cpp
		AArch64CompressJumpTables.cpp AArch64CondBrTuning.cpp
		AArch64ConditionOptimizer.cpp AArch64ConditionalCompares.cpp
		AArch64DeadRegisterDefinitionsPass.cpp
		AArch64ExpandPseudoInsts.cpp AArch64FalkorHWPFFix.cpp
		AArch64FastISel.cpp AArch64FrameLowering.cpp
		AArch64ISelDAGToDAG.cpp AArch64ISelLowering.cpp
		AArch64InstrInfo.cpp AArch64InstructionSelector.cpp
		AArch64LegalizerInfo.cpp AArch64LoadStoreOptimizer.cpp
		AArch64MCInstLower.cpp AArch64MacroFusion.cpp
		AArch64PBQPRegAlloc.cpp AArch64PreLegalizerCombiner.cpp
		AArch64PromoteConstant.cpp AArch64RedundantCopyElimination.cpp
		AArch64RegisterBankInfo.cpp AArch64RegisterInfo.cpp
		AArch64SIMDInstrOpt.cpp AArch64SelectionDAGInfo.cpp
		AArch64SpeculationHardening.cpp AArch64StorePairSuppress.cpp
		AArch64Subtarget.cpp AArch64TargetMachine.cpp
		AArch64TargetObjectFile.cpp AArch64TargetTransformInfo.cpp
	)
	+ files(AArch64AsmParser.cpp, subdir='AsmParser')
	+ files(AArch64InstPrinter.cpp, subdir='InstPrinter')
	+ files(
		AArch64AsmBackend.cpp AArch64ELFObjectWriter.cpp
		AArch64ELFStreamer.cpp AArch64MCAsmInfo.cpp
		AArch64MCCodeEmitter.cpp AArch64MCExpr.cpp
		AArch64MCTargetDesc.cpp AArch64MachObjectWriter.cpp
		AArch64TargetStreamer.cpp AArch64WinCOFFObjectWriter.cpp
		AArch64WinCOFFStreamer.cpp
		,
		subdir = 'MCTargetDesc'
	)
	+ files(AArch64TargetInfo.cpp, subdir='TargetInfo')
	+ files(AArch64BaseInfo.cpp, subdir='Utils')
	+ (if opts.llvm.xdw
	{
		files(
			AArch64Disassembler.cpp
			AArch64ExternalSymbolizer.cpp
			,
			subdir = 'Disassembler'
		)
	}
	else [])
};
