# vim: sw=4:ts=4:tw=78
# $FreeBSD$

#.endfor
#.if ${MK_LLVM_TARGET_X86} != "no"
#TGHDRS+=	X86GenAsmMatcher.inc
#TGHDRS+=	X86GenAsmWriter.inc
#TGHDRS+=	X86GenAsmWriter1.inc
#TGHDRS+=	X86GenCallingConv.inc
#TGHDRS+=	X86GenDAGISel.inc
#TGHDRS+=	X86GenDisassemblerTables.inc
#TGHDRS+=	X86GenEVEX2VEXTables.inc
#TGHDRS+=	X86GenFastISel.inc
#TGHDRS+=	X86GenGlobalISel.inc
#TGHDRS+=	X86GenInstrInfo.inc
#TGHDRS+=	X86GenRegisterBank.inc
#TGHDRS+=	X86GenRegisterInfo.inc
#TGHDRS+=	X86GenSubtargetInfo.inc
#.endif # MK_LLVM_TARGET_X86

sources =
{
	subdir = (llvmlibdir :: 'Target') :: 'X86';	# TODO: fix :::

	files(
		ShadowCallStack.cpp X86AsmPrinter.cpp
		X86AvoidStoreForwardingBlocks.cpp X86CallFrameOptimization.cpp
		X86CallLowering.cpp X86CallingConv.cpp X86CmovConversion.cpp
		X86CondBrFolding.cpp X86DiscriminateMemOps.cpp
		X86DomainReassignment.cpp X86EvexToVex.cpp X86ExpandPseudo.cpp
		X86FastISel.cpp X86FixupBWInsts.cpp X86FixupLEAs.cpp X86FixupSetCC.cpp
		X86FlagsCopyLowering.cpp X86FloatingPoint.cpp X86FrameLowering.cpp
		X86ISelDAGToDAG.cpp X86ISelLowering.cpp X86IndirectBranchTracking.cpp
		X86InsertPrefetch.cpp X86InstrFMA3Info.cpp X86InstrFoldTables.cpp
		X86InstrInfo.cpp X86InstructionSelector.cpp X86InterleavedAccess.cpp
		X86LegalizerInfo.cpp X86MCInstLower.cpp X86MachineFunctionInfo.cpp
		X86MacroFusion.cpp X86OptimizeLEAs.cpp X86PadShortFunction.cpp
		X86RegisterBankInfo.cpp X86RegisterInfo.cpp X86RetpolineThunks.cpp
		X86SelectionDAGInfo.cpp X86ShuffleDecodeConstantPool.cpp
		X86SpeculativeLoadHardening.cpp X86Subtarget.cpp X86TargetMachine.cpp
		X86TargetObjectFile.cpp X86TargetTransformInfo.cpp X86VZeroUpper.cpp
		X86WinAllocaExpander.cpp X86WinEHState.cpp
	)
	+ files(
		X86AsmInstrumentation.cpp X86AsmParser.cpp
		,
		subdir='AsmParser'
	)
	+ files(
		X86ATTInstPrinter.cpp X86InstComments.cpp
		X86InstPrinterCommon.cpp X86IntelInstPrinter.cpp
		,
		subdir='InstPrinter'
	)
	+ files(
		X86AsmBackend.cpp X86ELFObjectWriter.cpp X86MCAsmInfo.cpp
		X86MCCodeEmitter.cpp X86MCTargetDesc.cpp X86MachObjectWriter.cpp
		X86WinCOFFObjectWriter.cpp X86WinCOFFStreamer.cpp
		X86WinCOFFTargetStreamer.cpp
		,
		subdir='MCTargetDesc'
	)
	+ files(X86TargetInfo.cpp, subdir='TargetInfo')
	+ files(X86ShuffleDecode.cpp, subdir='Utils')
	+ (if opts.llvm.xdw
	{
		files(
			X86Disassembler.cpp X86DisassemblerDecoder.cpp
			,
			subdir='Disassembler'
		)
	}
	else [])
};
