#
# Support for the Clang (and Clang++) compiler.
#
# Arguments:
#   force_colour    force the compiler to colour diagnostic messages even if not on a TTY
#   lto             perform link-time optimization
#   use_ir          compile via the LLVM Intermediate Representation (IR)
#
force_colour = args.colour_diagnostics ? false;
lto = args.lto ? false;
use_ir = lto or (args.ir ? false);


# Find comnpiler binaries:
which = import('which');
compilers = record
{
	cc:file = which.executable('clang');
	cxx:file = which.executable('clang++');
};

# Most of this functionality is just a wrapper around generic "GCC-like" functionality.
gcc = import('gcc-like.fab');

#
# Clang specializations:
#
compile_flags =
	(if force_colour ['-fcolor-diagnostics'] else [])
	+
	(if use_ir ['-emit-llvm'] else [])
	;

linker_flags =
	(if force_colour ['-fcolor-diagnostics'] else [])
	+
	(if lto ['-flto' '-O4'] else [])
	;

test_toolchain = gcc.create_toolchain(compilers, compile_flags, linker_flags);


binary = function(objects:list[file[in]], binary:file[out],
                  options:gcc.Options, extra_flags:list[string]=[], cxx:bool=false): file
{
	flags = gcc.binary_flags(options);
	compiler = if cxx compilers.cxx else compilers.cc;

	gcc.link_binary(compiler, objects, binary, linker_flags+flags)
};

compile = function(srcs:list[file],
                   options:gcc.Options=gcc.default_compile_options,
                   extra_flags:list[string]=[],
                   extra_header_dirs:list[file]=[],
                   dependencies:list[file[in]]=[]
	): list[file]
{
	gcc.compile(compilers, srcs, options, compile_flags + extra_flags,
	            extra_header_dirs, dependencies)
};

shared_library = function(objects:list[file[in]], libname:string, subdir:file,
                          extra_flags:list[string]=[], cxx:bool=false): file[out]
{
	compiler = if cxx compilers.cxx else compilers.cc;
	gcc.library(compiler, objects, libname, subdir, shared=true, extra_flags=extra_flags)
};

static_library = function(objects:list[file[in]], libname:string, subdir:file,
                          extra_flags:list[string] = []): file[out]
{
	compiler = if cxx compilers.cxx else compilers.cc;
	gcc.library(compiler, objects, libname, subdir,
	            record { shared_library = false; }, extra_flags)
};
