# $FreeBSD$

arch =
	if args.target.arch.amd64 'x86_64'
	else if args.target.arch.i386 'i386'
	else
	{
		print('unknown target architecture:');
		print(args.target);

		'unknown'
	}
	;

target = arch + '-unknown-freebsd';

default_cflags:list[string] = [];
default_cxxflags:list[string] = [];

system_includes:list[file] =
	args.system_includes ? files(/usr/include /usr/local/include);

which = import('which');
clang = which.executable('clang');
clang_tblgen = which.executable('clang-tblgen');
llvm_tblgen = which.executable('llvm-tblgen');

gcc_like = import('gcc-like-compiler.fab', default_compiler = clang,
	system_includes = system_includes);

cc = gcc_like.compile;
cxx = gcc_like.compile_cxx;
shared_library = gcc_like.shared_library;

archive = action('${archive} rcs ${output} ${inputs}'
                 <- inputs:list[file[in]], output:file[out],
                    archive:file[in] = which.executable('ar'));

static_library = function(objects:list[file], name:string, subdir:file)
	archive(objects, subdir + '/lib' + name + '.a')
	;

tblgen = record
{
	generic = action('${tblgen} ${flags} -o ${output} ${source}'
	                 <- source:file[in], output:file[out], flags:list[string],
	                    tblgen:file[in]);

	# TODO: bind(generic, _, _, _, clang_tblgen) once Fabrique supports it

	clang = function(source:file[in], output:file[out], flags:list[string])
		generic(source, output, flags, clang_tblgen);

	llvm = function(source:file[in], output:file[out], flags:list[string])
		generic(source, output, flags, llvm_tblgen);
};
