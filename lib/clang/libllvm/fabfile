# vim: sw=4:ts=4:tw=78
# $FreeBSD$

opts = args.options;

TblGen = type record[
	dir:file,
	source:string,
	target:string,
	flags:list[string],
];

common_tblgen_files:list[TblGen] =
[
	record
	{
		dir = llvminclude :: 'IR';
		source = 'Attributes';
		target = 'IR/Attributes';
		flags = ['-gen-attrs'];
	}

	record
	{
		dir = llvmlibdir :: 'IR';
		source = 'AttributesCompatFunc';
		target = 'IR/AttributesCompatFunc';
		flags = ['-gen-attrs'];
	}

	record
	{
		dir = llvminclude :: 'IR';
		source = 'Intrinsics';
		target = 'IR/IntrinsicEnums';
		flags = ['-gen-intrinsic-enums'];
	}

	record
	{
		dir = llvminclude :: 'IR';
		source = 'Intrinsics';
		target = 'IR/IntrinsicImpl';
		flags = ['-gen-intrinsic-impl'];
	}

	record
	{
		dir = llvmlibdir :: 'Transforms/InstCombine';
		source = 'InstCombineTables';
		target = 'InstCombineTables';
		flags = ['-gen-searchable-tables'];
	}

	record
	{
		dir = llvmlibdir :: 'ToolDrivers/llvm-lib';
		source = 'Options';
		target = 'llvm-lib/Options';
		flags = ['-gen-opt-parser-defs'];
	}

	record
	{
		dir = llvmlibdir :: 'ToolDrivers/llvm-dlltool';
		source = 'Options';
		target = 'llvm-dlltool/Options';
		flags = ['-gen-opt-parser-defs'];
	}
];

tblgen_files = common_tblgen_files;

generated_headers = for i in tblgen_files
{
	source = file(i.source + '.td', subdir=i.dir);
	target = file(i.target + '.inc', subdir=gendir::'llvm');

	toolchain.tblgen.llvm(source, target, i.flags, [llvmroot::'include'])
};

sources =
	import('Analysis.fab').sources
	+
	{
		subdir = llvmlibdir :: 'AsmParser';
		files(LLLexer.cpp LLParser.cpp Parser.cpp)
	}
	+
	{
		subdir = llvmlibdir :: 'BinaryFormat';
		files(Dwarf.cpp Magic.cpp Wasm.cpp)
	}
	+ import('Bitcode.fab').sources
	+ import('CodeGen.fab').sources
	+ import('DebugInfo.fab').sources
	+ import('Demangle.fab').sources
	+ import('ExecutionEngine.fab').sources
	+ import('IR.fab').sources
	+
	{
		subdir = llvmlibdir :: 'IRReader';
		files(IRReader.cpp)
	}
	+ import('LTO.fab').sources
	+
	{
		subdir = llvmlibdir :: 'LineEditor';
		files(LineEditor.cpp)
	}
	+
	{
		subdir = llvmlibdir :: 'Linker';
		files(IRMover.cpp LinkModules.cpp)
	}
	+ import('MC.fab').sources
	+ import('MCA.fab').sources
	+ import('Object.fab').sources
	+ import('ObjectYAML.fab').sources
	+ import('Option.fab').sources
	+ import('ProfileData.fab').sources
	+ import('TableGen.fab').sources
	+
	{
		subdir = llvmlibdir :: 'ToolDrivers';

		file('DlltoolDriver.cpp',
			includes=[(gendir::'llvm')::'llvm-dlltool'],  # TODO: fix `:::`
			subdir=subdir::'llvm-dlltool')
		::
		(if opts.llvm.exl
		{
			file('LibDriver.cpp',
				includes=[(gendir::'llvm')::'llvm-lib'],  # TODO: fix `:::`
				subdir=subdir::'llvm-lib')
		}
		else [])
		::
		files()
	}
	+ import('Targets').sources
	+ import('Transforms').sources
	+ import('Support.fab').sources
	+ import('XRay.fab').sources
	;
