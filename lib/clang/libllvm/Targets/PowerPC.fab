# vim: sw=4:ts=4:tw=78
# $FreeBSD$

rules = target_tblgen_rules('PowerPC', 'PPC');
generated_headers =
[
	rules.asmMatcher()
	rules.asmWriter()
	rules.callingConv()
	rules.disassembler()
	rules.instrInfo()
	rules.isel.dag()
	rules.isel.fast()
	rules.mc.emitter()
	rules.reg.info()
	rules.subtarget()
];

sources =
{
	subdir = (llvmlibdir :: 'Target') :: 'PowerPC';	# TODO: fix :::

	files(
		PPCAsmPrinter.cpp PPCBoolRetToInt.cpp PPCBranchCoalescing.cpp
		PPCBranchSelector.cpp PPCCCState.cpp PPCCTRLoops.cpp
		PPCEarlyReturn.cpp PPCExpandISEL.cpp PPCFastISel.cpp
		PPCFrameLowering.cpp PPCHazardRecognizers.cpp
		PPCISelDAGToDAG.cpp PPCISelLowering.cpp PPCInstrInfo.cpp
		PPCLoopPreIncPrep.cpp PPCMCInstLower.cpp PPCMIPeephole.cpp
		PPCMachineFunctionInfo.cpp PPCPreEmitPeephole.cpp
		PPCQPXLoadSplat.cpp PPCReduceCRLogicals.cpp PPCRegisterInfo.cpp
		PPCSubtarget.cpp PPCTLSDynamicCall.cpp PPCTOCRegDeps.cpp
		PPCTargetMachine.cpp PPCTargetObjectFile.cpp
		PPCTargetTransformInfo.cpp PPCVSXCopy.cpp PPCVSXFMAMutate.cpp
		PPCVSXSwapRemoval.cpp
	)
	+ files(PPCAsmParser.cpp, subdir='AsmParser')
	+ files(PPCDisassembler.cpp, subdir='Disassembler')
	+ files(PPCInstPrinter.cpp, subdir='InstPrinter')
	+ files(
		PPCAsmBackend.cpp
		PPCELFObjectWriter.cpp
		PPCMCAsmInfo.cpp
		PPCMCCodeEmitter.cpp
		PPCMCExpr.cpp
		PPCMCTargetDesc.cpp
		PPCMachObjectWriter.cpp
		PPCPredicates.cpp
		,
		subdir='MCTargetDesc'
	)
	+ files(PowerPCTargetInfo.cpp, subdir='TargetInfo')
};
