# $FreeBSD$

opts = args.options;

TblGen = type record[
	dir:file,
	source:string,
	target:string,
	gen_action:string
];

common_tblgen_files:list[TblGen] =
[
	record
	{
		dir = llvminclude :: 'IR';
		source = 'Attributes';
		target = 'IR/Attributes';
		gen_action = '-gen-attrs';
	}

	record
	{
		dir = llvmlibdir :: 'IR';
		source = 'AttributesCompatFunc';
		target = 'IR/AttributesCompatFunc';
		gen_action = '-gen-attrs';
	}

	record
	{
		dir = llvminclude :: 'IR';
		source = 'Intrinsics';
		target = 'IR/IntrinsicEnums';
		gen_action = '-gen-intrinsic-enums';
	}

	record
	{
		dir = llvminclude :: 'IR';
		source = 'Intrinsics';
		target = 'IR/IntrinsicImpl';
		gen_action = '-gen-intrinsic-impl';
	}

	record
	{
		dir = llvmlibdir :: 'Transforms/InstCombine';
		source = 'InstCombineTables';
		target = 'InstCombineTables';
		gen_action = '-gen-searchable-tables';
	}

	record
	{
		dir = llvmlibdir :: 'ToolDrivers/llvm-lib';
		source = 'Options';
		target = 'llvm-lib/Options';
		gen_action = '-gen-opt-parser-defs';
	}

	record
	{
		dir = llvmlibdir :: 'ToolDrivers/llvm-dlltool';
		source = 'Options';
		target = 'llvm-dlltool/Options';
		gen_action = '-gen-opt-parser-defs';
	}
];

tblgen_files = common_tblgen_files;

generated_headers = foreach i <- tblgen_files
{
	source = file(i.source + '.td', subdir=i.dir);
	target = file(i.target + '.inc', subdir=gendir::'llvm');

	tblgen(source, target, i.gen_action)
};

sources =
	import('Analysis.fab').sources
	+
	{
		subdir = llvmlibdir :: 'AsmParser';
		files(LLLexer.cpp LLParser.cpp Parser.cpp)
	}
	+
	{
		subdir = llvmlibdir :: 'BinaryFormat';
		files(Dwarf.cpp Magic.cpp Wasm.cpp)
	}
	+ import('Bitcode.fab').sources
	+ import('CodeGen.fab').sources
	+ import('DebugInfo.fab').sources
	+ import('Demangle.fab').sources
	+ import('ExecutionEngine.fab').sources
	+ import('IR.fab').sources
	+
	{
		subdir = llvmlibdir :: 'IRReader';
		files(IRReader.cpp)
	}
	+ import('LTO.fab').sources
	+
	{
		subdir = llvmlibdir :: 'LineEditor';
		files(LineEditor.cpp)
	}
	+
	{
		subdir = llvmlibdir :: 'Linker';
		files(IRMover.cpp LinkModules.cpp)
	}
	+ import('MC.fab').sources
	+ import('MCA.fab').sources
	+ import('Object.fab').sources
	+ import('ObjectYAML.fab').sources
	+ import('Option.fab').sources
	+ import('ProfileData.fab').sources
	+ import('TableGen.fab').sources
#	+
#	{
#		subdir = llvmlibdir :: 'ToolDrivers';
#		optsdir = (gendir :: 'llvm') :: 'llvm-dlltool';   # TODO: fix `:::`
#
#		file('DlltoolDriver.cpp', includes=[optsdir], subdir=subdir::'llvm-dlltool')
#		::
#		if opts.exl files(LibDriver.cpp, subdir='llvm-lib') else []
#	}
	+ import('Targets').sources
	+ import('Transforms').sources
	+ import('Support.fab').sources
	+ import('XRay.fab').sources
	;


#.include <src.opts.mk>
#.include "../llvm.pre.mk"
#
#LIB=		llvm
#INTERNALLIB=
#
#CFLAGS+=	-I${.OBJDIR}
#
#.if ${MK_LLVM_TARGET_AARCH64} == "no" && ${MK_LLVM_TARGET_ARM} == "no" && \
#    ${MK_LLVM_TARGET_BPF} == "no" && ${MK_LLVM_TARGET_MIPS} == "no" && \
#    ${MK_LLVM_TARGET_POWERPC} == "no" && ${MK_LLVM_TARGET_RISCV} == "no" && \
#    ${MK_LLVM_TARGET_SPARC} == "no" && ${MK_LLVM_TARGET_X86} == "no"
#.error Please enable at least one of: MK_LLVM_TARGET_AARCH64,\
# MK_LLVM_TARGET_ARM, MK_LLVM_TARGET_BPF, MK_LLVM_TARGET_MIPS, \
# MK_LLVM_TARGET_POWERPC, MK_LLVM_TARGET_RISCV, MK_LLVM_TARGET_SPARC, \
# or MK_LLVM_TARGET_X86
#.endif
#
#.for arch in AArch64 ARM BPF Mips PowerPC RISCV Sparc X86
#. if ${MK_LLVM_TARGET_${arch:tu}} != "no"
#CFLAGS+=	-I${LLVM_SRCS}/lib/Target/${arch}
#. endif
#.endfor

