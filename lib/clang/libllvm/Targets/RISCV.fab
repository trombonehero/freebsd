# vim: sw=4:ts=4:tw=78
# $FreeBSD$

#.if ${MK_LLVM_TARGET_RISCV} != "no"
#TGHDRS+=	RISCVGenAsmMatcher.inc
#TGHDRS+=	RISCVGenAsmWriter.inc
#TGHDRS+=	RISCVGenCallingConv.inc
#TGHDRS+=	RISCVGenCompressInstEmitter.inc
#TGHDRS+=	RISCVGenDAGISel.inc
#TGHDRS+=	RISCVGenDisassemblerTables.inc
#TGHDRS+=	RISCVGenDAGISel.inc
#TGHDRS+=	RISCVGenInstrInfo.inc
#TGHDRS+=	RISCVGenMCCodeEmitter.inc
#TGHDRS+=	RISCVGenMCPseudoLowering.inc
#TGHDRS+=	RISCVGenRegisterInfo.inc
#TGHDRS+=	RISCVGenSubtargetInfo.inc
#TGHDRS+=	RISCVGenSystemOperands.inc
#.endif # MK_LLVM_TARGET_RISCV

sources =
{
	subdir = (llvmlibdir :: 'Target') :: 'RISCV';

	files(
		RISCVAsmPrinter.cpp RISCVExpandPseudoInsts.cpp RISCVFrameLowering.cpp
		RISCVInstrInfo.cpp RISCVISelDAGToDAG.cpp RISCVISelLowering.cpp
		RISCVMCInstLower.cpp RISCVMergeBaseOffset.cpp RISCVRegisterInfo.cpp
		RISCVSubtarget.cpp RISCVTargetMachine.cpp RISCVTargetObjectFile.cpp
	)
	+ files(RISCVAsmParser.cpp, subdir='AsmParser')
	+ files(RISCVDisassembler.cpp, subdir='Disassembler')
	+ files(RISCVInstPrinter.cpp, subdir='InstPrinter')
	+ files(
		RISCVAsmBackend.cpp RISCVELFObjectWriter.cpp RISCVELFStreamer.cpp
		RISCVMCAsmInfo.cpp RISCVMCCodeEmitter.cpp RISCVMCExpr.cpp
		RISCVMCTargetDesc.cpp RISCVTargetStreamer.cpp
		,
		subdir = 'MCTargetDesc'
	)
	+ files(RISCVTargetInfo.cpp, subdir='TargetInfo')
	+ files(RISCVBaseInfo.cpp RISCVMatInt.cpp, subdir='Utils')
};
