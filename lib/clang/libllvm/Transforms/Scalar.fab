# $FreeBSD$

sources =
{
	subdir = llvmlibdir :: 'Transforms';

	files(
		ADCE.cpp AlignmentFromAssumptions.cpp BDCE.cpp CallSiteSplitting.cpp
		ConstantHoisting.cpp ConstantProp.cpp CorrelatedValuePropagation.cpp
		DCE.cpp DeadStoreElimination.cpp DivRemPairs.cpp EarlyCSE.cpp
		FlattenCFGPass.cpp Float2Int.cpp GVN.cpp GVNHoist.cpp GVNSink.cpp
		GuardWidening.cpp IVUsersPrinter.cpp IndVarSimplify.cpp
		InductiveRangeCheckElimination.cpp InstSimplifyPass.cpp
		JumpThreading.cpp LICM.cpp LoopAccessAnalysisPrinter.cpp
		LoopDataPrefetch.cpp LoopDeletion.cpp LoopDistribute.cpp
		LoopIdiomRecognize.cpp LoopInstSimplify.cpp LoopInterchange.cpp
		LoopLoadElimination.cpp LoopPassManager.cpp LoopPredication.cpp
		LoopRerollPass.cpp LoopRotation.cpp LoopSimplifyCFG.cpp LoopSink.cpp
		LoopStrengthReduce.cpp LoopUnrollPass.cpp LoopUnrollAndJamPass.cpp
		LoopUnswitch.cpp LoopVersioningLICM.cpp LowerAtomic.cpp
		LowerExpectIntrinsic.cpp LowerGuardIntrinsic.cpp MakeGuardsExplicit.cpp
		MemCpyOptimizer.cpp MergeICmps.cpp MergedLoadStoreMotion.cpp
		NaryReassociate.cpp NewGVN.cpp PartiallyInlineLibCalls.cpp
		PlaceSafepoints.cpp Reassociate.cpp Reg2Mem.cpp
		RewriteStatepointsForGC.cpp SCCP.cpp SROA.cpp Scalarizer.cpp
		SeparateConstOffsetFromGEP.cpp SimpleLoopUnswitch.cpp
		SimplifyCFGPass.cpp Sink.cpp SpeculateAroundPHIs.cpp
		SpeculativeExecution.cpp StraightLineStrengthReduce.cpp
		StructurizeCFG.cpp TailRecursionElimination.cpp
		WarnMissedTransforms.cpp
		,
		subdir = 'Scalar'
	)
	+
	(if opts.llvm.clang.extras
	{
		files(InferAddressSpaces.cpp Scalar.cpp, subdir='Scalar')
	}
	else [])
};
